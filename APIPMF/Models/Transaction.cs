/*
 * Personal Finance Management API
 *
 * Personal Finance Management API allows analyze of a client's spending patterns against pre-defined budgets over time 
 *
 * OpenAPI spec version: v1
 * Contact: aleksandar.milosevic@asseco-see.rs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace APIPMF.Models
{ 
    /// <summary>
    /// transaction
    /// </summary>
    [DataContract]
    public partial class Transaction : IEquatable<Transaction>
    { 
        /// <summary>
        /// Id of the transaction
        /// </summary>
        /// <value>Id of the transaction</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; private set; }

        /// <summary>
        /// beneficiary name
        /// </summary>
        /// <value>beneficiary name</value>

        [DataMember(Name="beneficiary-name")]
        public string BeneficiaryName { get; set; }

        /// <summary>
        /// Date of the transaction
        /// </summary>
        /// <value>Date of the transaction</value>
        [Required]

        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [Required]

        [DataMember(Name="direction")]
        public DirectionsEnum Direction { get; set; }

        /// <summary>
        /// Transaction amount
        /// </summary>
        /// <value>Transaction amount</value>
        [Required]

        [DataMember(Name="amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Transaction description
        /// </summary>
        /// <value>Transaction description</value>

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Currency for transaction. ISO 4217 currency code.
        /// </summary>
        /// <value>Currency for transaction. ISO 4217 currency code.</value>
        [Required]

        [StringLength(3, MinimumLength=3)]
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Mcc
        /// </summary>

        [DataMember(Name="mcc")]
        public MccCodeEnum Mcc { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [Required]

        [DataMember(Name="kind")]
        public TransactionKindsEnum Kind { get; set; }

        /// <summary>
        /// Code of category. If literal it&#x27;s category, If number it is a sub category code.
        /// </summary>
        /// <value>Code of category. If literal it&#x27;s category, If number it is a sub category code.</value>

        [DataMember(Name="catcode")]
        public string Catcode { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BeneficiaryName: ").Append(BeneficiaryName).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Catcode: ").Append(Catcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Transaction)obj);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="other">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    BeneficiaryName == other.BeneficiaryName ||
                    BeneficiaryName != null &&
                    BeneficiaryName.Equals(other.BeneficiaryName)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Direction == other.Direction ||
                    Direction != null &&
                    Direction.Equals(other.Direction)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    Mcc == other.Mcc ||
                    Mcc != null &&
                    Mcc.Equals(other.Mcc)
                ) && 
                (
                    Kind == other.Kind ||
                    Kind != null &&
                    Kind.Equals(other.Kind)
                ) && 
                (
                    Catcode == other.Catcode ||
                    Catcode != null &&
                    Catcode.Equals(other.Catcode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (BeneficiaryName != null)
                    hashCode = hashCode * 59 + BeneficiaryName.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (Direction != null)
                    hashCode = hashCode * 59 + Direction.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (Mcc != null)
                    hashCode = hashCode * 59 + Mcc.GetHashCode();
                    if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                    if (Catcode != null)
                    hashCode = hashCode * 59 + Catcode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Transaction left, Transaction right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Transaction left, Transaction right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
