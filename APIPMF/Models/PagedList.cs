/*
 * Personal Finance Management API
 *
 * Personal Finance Management API allows analyze of a client's spending patterns against pre-defined budgets over time 
 *
 * OpenAPI spec version: v1
 * Contact: aleksandar.milosevic@asseco-see.rs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace APIPMF.Models
{ 
    /// <summary>
    /// List with support for paging
    /// </summary>
    [DataContract]
    public partial class PagedList : IEquatable<PagedList>
    { 
        /// <summary>
        /// Total number of items in collection
        /// </summary>
        /// <value>Total number of items in collection</value>

        [DataMember(Name="total-count")]
        public int? TotalCount { get; set; }

        /// <summary>
        /// Size of the page
        /// </summary>
        /// <value>Size of the page</value>

        [Range(1, 100)]
        [DataMember(Name="page-size")]
        public int? PageSize { get; set; }

        /// <summary>
        /// Index of current page
        /// </summary>
        /// <value>Index of current page</value>

        [DataMember(Name="page")]
        public int? Page { get; set; }

        /// <summary>
        /// Total number of pages of set size
        /// </summary>
        /// <value>Total number of pages of set size</value>

        [DataMember(Name="total-pages")]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>

        [DataMember(Name="sort-order")]
        public SortOrderEnum SortOrder { get; set; }

        /// <summary>
        /// Attribute of the collection item to sort by
        /// </summary>
        /// <value>Attribute of the collection item to sort by</value>

        [DataMember(Name="sort-by")]
        public string SortBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagedList {\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PagedList)obj);
        }

        /// <summary>
        /// Returns true if PagedList instances are equal
        /// </summary>
        /// <param name="other">Instance of PagedList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagedList other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    TotalCount == other.TotalCount ||
                    TotalCount != null &&
                    TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    PageSize == other.PageSize ||
                    PageSize != null &&
                    PageSize.Equals(other.PageSize)
                ) && 
                (
                    Page == other.Page ||
                    Page != null &&
                    Page.Equals(other.Page)
                ) && 
                (
                    TotalPages == other.TotalPages ||
                    TotalPages != null &&
                    TotalPages.Equals(other.TotalPages)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    SortOrder != null &&
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    SortBy == other.SortBy ||
                    SortBy != null &&
                    SortBy.Equals(other.SortBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (TotalCount != null)
                    hashCode = hashCode * 59 + TotalCount.GetHashCode();
                    if (PageSize != null)
                    hashCode = hashCode * 59 + PageSize.GetHashCode();
                    if (Page != null)
                    hashCode = hashCode * 59 + Page.GetHashCode();
                    if (TotalPages != null)
                    hashCode = hashCode * 59 + TotalPages.GetHashCode();
                    if (SortOrder != null)
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (SortBy != null)
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PagedList left, PagedList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PagedList left, PagedList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
